<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Interactive Button Layout</title>
    <style>
        body {
            background: linear-gradient(to right, #dfe9f3, #ffffff);
            font-family: 'Trebuchet MS', sans-serif;
            text-align: center;
            margin: 0;
            padding: 0;
            height: 100vh;
            overflow-x: hidden;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            transition: background 0.3s, color 0.3s;
        }

        /* Dark Mode */
        body.dark-mode {
            background: linear-gradient(to right, #2e3b4e, #1c1e29);
            color: white;
        }

        h1 {
            font-size: 4rem;
            color: #333;
            margin-top: 50px;
            font-weight: bold;
            text-shadow: 2px 2px 5px rgba(0, 0, 0, 0.2);
            letter-spacing: 2px;
        }

        #buttonsContainer {
            display: flex;
            flex-direction: column;
            align-items: center;
            margin-top: 20px;
        }

        .button-with-x {
            display: flex;
            align-items: center;
            margin: 10px 0;
        }

        button {
            width: 120px;
            height: 60px;
            font-size: 2rem;
            border: none;
            border-radius: 15px;
            cursor: pointer;
            transition: transform 0.3s ease, background-color 0.3s ease;
            text-align: center;
            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.1);
            margin: 0 10px;
        }

        button:hover {
            background-color: #ddd;
            transform: scale(1.1);
        }

        .close-button {
            background-color: white;
            font-size: 1.8rem;
            padding: 0 12px;
            cursor: pointer;
            border-radius: 50%;
            border: none;
            margin-left: 15px;
            color: black;
            transition: transform 0.3s ease;
        }

        .close-button:hover {
            transform: scale(1.3);
        }

        .number-button {
            transition: border 0.3s ease;
        }

        .active-button {
            border: 3px solid black;
        }

        .help-button {
            position: fixed;
            left: 20px;
            top: 50%;
            transform: translateY(-50%);
            width: 120px;
            height: 120px;
            background-color: #4CAF50;
            color: white;
            border: 3px solid black;
            border-radius: 15px;
            cursor: pointer;
            font-size: 1.2rem;
            text-align: center;
            padding: 10px;
            line-height: 1.5;
            white-space: normal;
            display: none;
        }

        .help-button:hover {
            background-color: #45a049;
        }

        .autoscroller-button, .autoclicker-button, .delete-all-button {
            position: fixed;
            right: 20px;
            width: 120px;
            height: 120px;
            color: white;
            border: 3px solid black;
            border-radius: 15px;
            font-size: 1.2rem;
            text-align: center;
            line-height: 1.5;
            padding: 10px;
            white-space: normal;
            z-index: 1;
        }

        .autoscroller-button {
            top: 30%;
            background-color: red;
        }

        .autoscroller-button:hover {
            background-color: darkred;
        }

        .autoclicker-button {
            top: 50%;
            background-color: red;
        }

        .autoclicker-button:hover {
            background-color: darkred;
        }

        .delete-all-button {
            top: 70%;
            background-color: darkred;
            display: block;
        }

        .delete-all-button:hover {
            background-color: maroon;
        }

        .level-indicator {
            position: fixed;
            top: 30%;
            left: 50%;
            transform: translateX(-50%);
            background-color: red;
            color: white;
            font-size: 1.5rem;
            padding: 20px;
            border-radius: 15px;
            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.2);
            text-align: center;
            display: none;
        }

        .fade-out {
            animation: fadeOut 0.5s forwards;
        }

        @keyframes fadeOut {
            0% {
                opacity: 1;
            }
            100% {
                opacity: 0;
            }
        }

        .toggle-slow-button {
            position: fixed;
            top: 20px;
            right: 20px;
            width: 120px;
            height: 60px;
            background-color: grey;
            color: white;
            border: 3px solid black;
            border-radius: 15px;
            font-size: 1.2rem;
            text-align: center;
            line-height: 2;
            cursor: pointer;
            z-index: 1;
        }

        .toggle-slow-button.off {
            background-color: white;
            color: black;
        }

        /* Dark Mode Toggle Button */
        .dark-mode-toggle {
            position: fixed;
            top: 20px;
            left: 20px;
            background-color: #333;
            color: white;
            border: none;
            padding: 10px;
            font-size: 1.5rem;
            cursor: pointer;
            border-radius: 10px;
            z-index: 2;
        }
    </style>
</head>
<body>

    <h1>Interactive Button Layout</h1>
    
    <div id="buttonsContainer">
        <div class="button-with-x" id="button1">
            <button class="number-button active-button" onclick="addNewButton(1)" id="button1Text">1</button>
            <button class="close-button" onclick="removeButtons(1)">‚ùå</button>
        </div>
    </div>
    
    <button class="help-button" id="helpButton" onclick="restoreButtons()">Restore</button>
    <button class="autoscroller-button" id="autoscrollerButton" onclick="toggleAutoScroller()">Enable Auto-Scroller</button>
    <button class="autoclicker-button" id="autoclickerButton" onclick="toggleAutoclicker()">Enable Autoclicker</button>
    <button class="delete-all-button" id="deleteAllButton" onclick="deleteAllButtons()">Delete All</button>

    <div class="level-indicator" id="levelIndicator">Reach level 150 for a win!</div>

    <button class="toggle-slow-button" id="toggleSlowButton" onclick="toggleSlowDelete()">Slow</button>

    <!-- Dark Mode Toggle Button -->
    <button class="dark-mode-toggle" id="darkModeToggle" onclick="toggleDarkMode()">üåô</button>

    <script>
        let currentNumber = 1;
        let autoclickerEnabled = false;
        let autoclickerInterval;
        let autoScrollerEnabled = false;
        let autoScrollerInterval;
        let firstButtonColor = null;
        let buttonColors = {1: ''};
        let slowDeleteEnabled = true;

        // Function to toggle dark mode
        function toggleDarkMode() {
            document.body.classList.toggle('dark-mode');
            const toggleButton = document.getElementById('darkModeToggle');
            if (document.body.classList.contains('dark-mode')) {
                toggleButton.innerHTML = 'üåï'; 
            } else {
                toggleButton.innerHTML = 'üåô'; 
            }
        }

        // Function to generate random color
        function getRandomColor() {
            const letters = '0123456789ABCDEF';
            let color = '#';
            for (let i = 0; i < 6; i++) {
                color += letters[Math.floor(Math.random() * 16)];
            }
            return color;
        }

        // Function to add a new button
        function addNewButton(numberClicked) {
            if (numberClicked === currentNumber) {
                currentNumber++;
                const newButtonContainer = document.createElement('div');
                newButtonContainer.classList.add('button-with-x');
                newButtonContainer.setAttribute('id', 'button' + currentNumber);
                
                const newButton = document.createElement('button');
                newButton.classList.add('number-button');
                newButton.textContent = currentNumber;
                newButton.setAttribute('onclick', `addNewButton(${currentNumber})`);

                const randomColor = getRandomColor();
                buttonColors[currentNumber] = randomColor;
                newButton.style.backgroundColor = randomColor;

                const closeButton = document.createElement('button');
                closeButton.classList.add('close-button');
                closeButton.textContent = '‚ùå';
                closeButton.setAttribute('onclick', `removeButtons(${currentNumber})`);

                newButtonContainer.appendChild(newButton);
                newButtonContainer.appendChild(closeButton);
                
                document.getElementById('buttonsContainer').appendChild(newButtonContainer);
                updateHighestButton();
            }
        }

        // Function to remove buttons
        function removeButtons(buttonNumber) {
            const buttonContainer = document.getElementById('button' + buttonNumber);
            if (buttonContainer) {
                if (slowDeleteEnabled) {
                    buttonContainer.classList.add('fade-out');
                    setTimeout(() => {
                        buttonContainer.remove();
                        currentNumber = buttonNumber - 1;
                        updateHighestButton();
                        if (currentNumber === 0) {
                            document.getElementById('helpButton').style.display = 'block';
                            toggleDeleteAllButtonVisibility(false);
                        }
                    }, 500);
                } else {
                    buttonContainer.remove();
                    currentNumber = buttonNumber - 1;
                    updateHighestButton();
                    if (currentNumber === 0) {
                        document.getElementById('helpButton').style.display = 'block';
                        toggleDeleteAllButtonVisibility(false);
                    }
                }
            }
        }

        // Function to toggle slow delete
        function toggleSlowDelete() {
            slowDeleteEnabled = !slowDeleteEnabled;
            const button = document.getElementById('toggleSlowButton');
            button.classList.toggle('off');
            button.textContent = slowDeleteEnabled ? 'Slow' : 'Fast';
        }

        // Update the highest button visible
        function updateHighestButton() {
            document.querySelectorAll('.number-button').forEach(button => {
                if (parseInt(button.textContent) === currentNumber) {
                    button.classList.add('active-button');
                } else {
                    button.classList.remove('active-button');
                }
            });
        }

        // Restore buttons to the initial state
        function restoreButtons() {
            const buttonsContainer = document.getElementById('buttonsContainer');
            buttonsContainer.innerHTML = '';
            currentNumber = 1;
            addNewButton(1);
            document.getElementById('helpButton').style.display = 'none';
        }

        // Toggle autoscroller
        function toggleAutoScroller() {
            if (autoScrollerEnabled) {
                clearInterval(autoScrollerInterval);
                document.getElementById('autoscrollerButton').textContent = 'Enable Auto-Scroller';
                autoScrollerEnabled = false;
            } else {
                autoScrollerInterval = setInterval(() => {
                    window.scrollBy(0, 1);
                }, 100); 
                document.getElementById('autoscrollerButton').textContent = 'Disable Auto-Scroller';
                autoScrollerEnabled = true;
            }
        }

        // Toggle autoclicker
        function toggleAutoclicker() {
            if (autoclickerEnabled) {
                clearInterval(autoclickerInterval);
                document.getElementById('autoclickerButton').textContent = 'Enable Autoclicker';
                autoclickerEnabled = false;
            } else {
                autoclickerInterval = setInterval(() => {
                    const activeButton = document.querySelector('.active-button');
                    if (activeButton) {
                        activeButton.click();
                    }
                }, 1000); 
                document.getElementById('autoclickerButton').textContent = 'Disable Autoclicker';
                autoclickerEnabled = true;
            }
        }

        // Delete all buttons
        function deleteAllButtons() {
            const buttons = document.querySelectorAll('.button-with-x');
            buttons.forEach(button => button.remove());
            currentNumber = 0;
            document.getElementById('helpButton').style.display = 'none';
        }

        // Toggle delete-all button visibility
        function toggleDeleteAllButtonVisibility(visible) {
            const deleteButton = document.getElementById('deleteAllButton');
            deleteButton.style.display = visible ? 'block' : 'none';
        }
    </script>

</body>
</html>
